type Todo {
  id: ID!
  content: String!
  done: Boolean!
  user: User!
  detail: [Detail]!
}

type User {
  id: ID!
  name: String!
  todos: [Todo]!
  details: [Detail]!
  parent: Parent
}

type Parent {
  id: ID!
  name: String!
  users: [User]!
}

type Detail {
  id: ID!
  content: String!
  done: Boolean!
  todo: Todo!
  user: User!
}


type Query {
  # TODOの全情報を取得
  todos: [Todo!]!
  # 1TODO情報の取得
  todo(id: ID!): Todo!

  # 全ユーザの情報を取得
  users: [User!]!
  # １ユーザの情報を取得
  user(id: ID!): User!

  parents: [Parent]!
  parent(id: ID!): Parent!

  details: [Detail]!
  detail(id: ID!): Detail! 
}

input NewTodo {
  userId: Int!
  content: String!
}

input NewUser {
  name: String!
}

input NewParent {
  name: String!
}

input NewDetail {
  userId: Int!
  todo_id: Int!
  content: String!
}

input fixedTodo {
  id: Int!
  content: String!
}

input ParentToUser {
  parentId: Int!
  userId: Int!
}

type Mutation {
  # TODO情報を登録
  createTodo(input: NewTodo!): Todo!
  # ユーザ情報を登録
  createUser(input: NewUser!): User!

  # TODO情報を修正
  fixTodo(input: fixedTodo!): Todo!
  # TODOをDONEする
  doneTodo(input: Int!): Todo!
  # TODOを削除する
  deleteTodo(input: Int!): Boolean!

  # ユーザ情報を削除する
  deleteUser(input: Int!): Boolean!

  createParent(input: NewParent!): Parent!
  setObserve(input: ParentToUser!): User!

  createDetail(input: NewDetail!): Detail!
}